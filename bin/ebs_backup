#!/usr/bin/perl
# Copyright (C) 2015  BroudyNET LLC
# Published under terms of MIT License, see LICENSE file for details

use strict;
use warnings;
use LWP::Simple;
use Time::Piece;
use Net::Amazon::EC2;

my $CFG = "/etc/aws/env";
my $mysql_defaults='/etc/mysql/debian.cnf';

my $RETAIN_FULL = 6; # months
my $RETAIN_DIFF = 6; # weeks
my $RETAIN_INC  = 2; # weeks

if (not exists($ENV{'AWS_ACCESS_KEY_ID'}) and -f $CFG) {
    @ARGV = map {s/'/'"'"'/g; "'$_'"} @ARGV;
    exec <<"END";
        . '$CFG'
        PATH=/sbin:/usr/sbin:\$PATH
        exec    $0  @ARGV;
END
    die "This should never happen.";
}

my $WEEK = 7*24*60*60;
my $instance=get('http://169.254.169.254/latest/meta-data/instance-id');
my $region=get('http://169.254.169.254/latest/meta-data/placement/availability-zone');
$region =~ s/([0-9])[a-z]*$/$1/;
my $host=`hostname`;
chomp($host);
my $snapDate=localtime->datetime;

my $ec2 = Net::Amazon::EC2->new(
  AWSAccessKeyId => $ENV{'AWS_ACCESS_KEY_ID'},
  SecretAccessKey => $ENV{'AWS_SECRET_ACCESS_KEY'},
  region => $region,
  debug => 0
);

my $newLevel;
if (localtime->mday == 1) {
  $newLevel = 'full';
} elsif (localtime->wday == 1) {
  $newLevel = 'differential';
} else {
  $newLevel = 'incremental';
}

my %vols;
foreach my $vol (@{$ec2->describe_volumes}) {
  foreach my $att (@{$vol->attachments}) {
    if ($att->instance_id eq $instance) {
      my $dev = $att->device;
      $dev =~ s:(/dev/sd|/dev/xvd)::;
      $vols{$dev} = $att->volume_id;
    }
  }
}

#print "AVAILABLE VOLUMES\n";
#print join("\n", keys(%vols)) . "\n";

my %dump_vgs;

open(FSTAB, '</etc/fstab') or die "Can't list mounts: $!";
foreach (<FSTAB>) {
  s/#.*//;
  next if /^\s*$/;
  my ($origdev, $mp, $fstype, $options, $dump) = split;
  next if not ($dump > 0);

  my $vg = qx|lvs --noheadings -o vg_name $origdev 2>/dev/null|;
  $vg =~ s/\s//g;
  if ($vg) {
    if (exists($dump_vgs{$vg})) {
      push(@{$dump_vgs{$vg}{'mps'}}, $mp);
      push(@{$dump_vgs{$vg}{'lvs'}}, $origdev);
    } else {
      my @pvs = split($/, qx|vgs --noheadings -o pv_name $vg|);
      s/\s*//g for @pvs;
      $dump_vgs{$vg}{'pvs'} = \@pvs;
      $dump_vgs{$vg}{'mps'} = [$mp];
      $dump_vgs{$vg}{'lvs'} = [$origdev];
    }
  } else {
    do_snap([$origdev], [$mp], has_mysql($origdev));
  }
}
close(FSTAB);

foreach my $vg (keys(%dump_vgs)) {
  my $any_mysql = 0;
  foreach (@{$dump_vgs{$vg}{'pvs'}}) {
    if (has_mysql($_)) {
      $any_mysql = 1;
      last;
    }
  }
  do_snap($dump_vgs{$vg}{'pvs'}, $dump_vgs{$vg}{'mps'}, $any_mysql);
}

sub has_mysql {
  my $chk = shift @_;
  my $mnt;
  return 0 if not -r $mysql_defaults;

  my ($junk, $dir) = split(/\s+/, qx|mysql --defaults-file=$mysql_defaults -BNe 'show variables like "datadir"'|);
  return 0 if not $dir;
  open(DF, "df $dir |") or die "Can't find disks: $!";
  foreach (<DF>) {
    next if (not m|^/|);
    ($mnt) = split(/\s+/);
    last;
  }
  close(DF);
  return $mnt eq $chk;
}

sub do_snap {
  my ($origdevs, $mps, $has_mysql) = @_;

  my @vols;
  foreach my $origdev (@$origdevs) {
    my $dev=$origdev;
    $dev =~ s:(/dev/sd|/dev/xvd)::;
    print "BACKUP $origdev";

    if (not exists($vols{$dev})) {
      print " NO VOLUME FOUND\n";
      next;
    } else {
      push(@vols, $vols{$dev});
    }
    
  }
  printf(" (%s) ", join(' ', @vols));
  
  my $desc = sprintf("EBS Backup %s (%s at %s)", join(' ', @$mps), $host, $snapDate);

  my $args = "";
  foreach my $mp (@$mps) {
    $args .= " --freeze-filesystem $mp" if $mp and $mp ne '/';
  }
  $args .= " --mysql  --mysql-defaults-file=$mysql_defaults" if $has_mysql;
  $args .= " --region $region";
  $args .= " --description \"$desc\"";
  $args .= ' ' . join(' ', @vols);

  #printf("\nec2-consistent-snapshot $args\n");
  my @snaps = split(/\s+/, qx|ec2-consistent-snapshot $args|);
  printf("SNAP %s\n", join(' ', @snaps));
  foreach my $snap (@snaps) {
    $ec2->create_tags(ResourceId => $snap, Tags => { level => $newLevel });
  }

  foreach my $level ('incremental', 'differential', 'full') {
    foreach my $vol (@vols) {
      my $snaps = $ec2->describe_snapshots(Filter => [['volume-id', $vol], ['tag:level', $level]]);
      foreach my $snap (@{$snaps}) {
        my $time = $snap->start_time;
        $time =~ s/\.[0-9]*Z$//;
        next if $time =~ /^\s*$/;
        #printf("TIME %s\n", $time);
        $time = Time::Piece->strptime($time, "%Y-%m-%dT%H:%M:%S");
        #printf("MAYBE DELETE %s@%s from %s\n", $snap->snapshot_id, $level, $time);
        if (($level eq 'full' && $time->add_months($RETAIN_FULL) < localtime)
            || ($level eq 'differential' && $time + $RETAIN_DIFF*$WEEK < localtime)
            || ($level eq 'incremental' && $time + $RETAIN_INC*$WEEK < localtime))
        {
          printf("DELETE %s@%s from %s\n", $snap->snapshot_id, $level, $time);
          $ec2->delete_snapshot(SnapshotId => $snap->snapshot_id);
        }

      }
    }
  }

}

